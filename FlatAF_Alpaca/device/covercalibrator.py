# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# covercalibrator.py - Alpaca API responders for Covercalibrator
#
# Author: Douglas Reynolds
# Project: FlatAF - Open Source Flat Panel for Astrophotography
# Website: https://astroaf.space
# License: See LICENSE.md (ASCOM and CC BY-NC 4.0) (see LICENSE file)
# Copyright (c) 2025 Douglas Reynolds AstroAF
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# 03-10-2025   Initial Development

import json
import serial # type: ignore
import os
import requests # type: ignore
import falcon # type: ignore
import random

from ascom_api import ASCOMDeviceClient
from dynamic_discovery import discover_flataf
from falcon import Request, Response, HTTPBadRequest, before, HTTP_200, HTTP_400, HTTP_500 # type: ignore
from logging import Logger
from pathlib import Path
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                StateValue, get_request_field, to_bool
from exceptions import *        # Nothing but exception classes

logger: Logger = None

# connected state
connection_state = False

# device discovered URL
discovered_url = ""


# Brightness
last_brightness: int = 0
device_brightness: int = 32767

# Serial Connection
ser: serial.Serial = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
maxdev = 0                      # Single instance

class BadRequestException(Exception):
    pass

# Load version from version.json at runtime
try:
    with open(Path(__file__).parent / "version.json") as f:
        version_info = json.load(f)
        VERSION = version_info.get("version", "v0.0.0-dev")
except Exception:
    VERSION = "v0.0.0-dev"

# -----------
# DEVICE INFO
# -----------
class CovercalibratorMetadata:
    """ Metadata describing the Covercalibrator Device. Edit for your device"""
    Name = 'FlatAF Flat Panel'
    Version = VERSION
    Description = 'FlatAF ASCOM Flat Panel'
    DeviceType = 'Covercalibrator'
    DeviceID = 'af7c23d8-4b5e-4635-89b0-2f34d6e3c2c6'
    Info = 'Alpaca Flat Panel Device\nImplements ICovercalibrator\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 2  # ICoverCalibratorV2

# --------------
# SYMBOLIC ENUMS
# --------------
from enum import IntEnum

class CalibratorStatus(IntEnum):
    NotPresent = 0,
    Off = 1,
    NotReady = 2,
    Ready = 3,
    Unknown = 4,
    Error = 5

class CoverStatus(IntEnum):
    NotPresent = 0,
    Closed = 1,
    Moving = 2,
    Open = 3,
    Unknown = 4,
    Error = 5

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class connect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # Try the initial connection check
            connected = get_device_connected()

            if not connected:
                try:
                    new_url = discover_flataf()
                    if new_url:
                        global discovered_url
                        discovered_url = new_url
                        import time
                        time.sleep(1.2)  # Allow device to finalize connection
                        connected = get_device_connected()
                except Exception as ex:
                    print(f"Rediscovery exception: {ex}")

            resp.text = PropertyResponse(connected, req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Covercalibrator.Connect failed', ex)).json


def load_config():
    global discovered_url

    if not discovered_url:
        """Load configuration dynamically via network discovery."""
        discovered_url = discover_flataf()

        if not discovered_url:
            raise Exception("FlatAF device not found on the network. Cannot continue.")

    config = {
        "BaseURL": discovered_url,
        "MAX_BRIGHTNESS": 32767,  # Still helpful to keep maximum brightness configurable
    }

    return config
    
@before(PreProcessRequest(maxdev))
# NOTE: ASCOM Conformance Test (ConformU) expects a rapid connect/disconnect/connect sequence
# faster than is realistically achievable over HTTP on a Wi-Fi network. This constraint is
# artificial and does not impact real-world usage, including integration with software such as NINA.
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            is_conn = get_device_connected()
            if is_conn is None:
                is_conn = False
            resp.text = PropertyResponse(is_conn, req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Covercalibrator.Connected failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            ctid_str = get_request_field('ClientTransactionID', req, default="0").strip()
            if not ctid_str:
                print(f"[ERROR] ClientTransactionID is empty after stripping whitespace")
                raise falcon.HTTPBadRequest(description="ClientTransactionID cannot be empty or whitespace.")
            try:
                ctid_val = int(ctid_str)
            except ValueError:
                print(f"[ERROR] Invalid ClientTransactionID: '{ctid_str}' is not an integer")
                raise falcon.HTTPBadRequest(description=f"Invalid ClientTransactionID: '{ctid_str}' must be an integer.")

            if "Connected" in req.media:
                conn_val = get_request_field('Connected', req, default="")
                if isinstance(conn_val, bool):
                    conn = conn_val
                elif isinstance(conn_val, str):
                    conn_stripped = conn_val.strip()
                    if not conn_stripped:
                        print(f"[ERROR] Invalid 'Connected' parameter: Empty String")
                        raise falcon.HTTPBadRequest(description="Connected parameter cannot be empty string")
                    try:
                        conn = to_bool(conn_stripped)
                    except Exception:
                        print(f"[ERROR] Invalid 'Connected' parameter value: {conn_stripped}")
                        raise falcon.HTTPBadRequest(description=f"Invalid 'Connected' parameter value: {conn_stripped}")
                else:
                    print(f"[ERROR] Invalid 'Connected' parameter type")
                    raise falcon.HTTPBadRequest(description="Invalid 'Connected' parameter type")
            else:
                conn = None

            config = load_config()
            base_url = config["BaseURL"]
            url = f"{base_url}/connected"
            payload = {"Connected": conn, "ClientTransactionID": ctid_val}
            headers = {"Content-Type": "application/json"}
            r = requests.put(url, json=payload, headers=headers, timeout=5)
            if r.status_code == 200:
                resp_data = r.json()
                resp_data["ClientTransactionID"] = ctid_val
                resp.text = PropertyResponse(resp_data.get("Value", True), req).json
            else:
                print(f"[ERROR] Device PUT /connected failed with status {r.status_code}")
                raise falcon.HTTPBadRequest(description=f"Device PUT /connected failed with status {r.status_code}")
        except falcon.HTTPBadRequest as bre:
            print(f"[ERROR] Bad Request: {bre}")
            raise
        except requests.exceptions.RequestException as ex:
            print(f"[ERROR] Network error: {ex}")
            raise falcon.HTTPServiceUnavailable(description='Network error when contacting device')
        except Exception as ex:
            print(f"[ERROR] Unexpected error: {ex}")
            raise falcon.HTTPInternalServerError(description="Covercalibrator.Connected failed")

def get_device_connected():
    global discovered_url
    if not discovered_url:
        try:
            discovered_url = discover_flataf()
        except Exception as ex:
            print(f"[ERROR] Failed to discover FlatAF device: {ex}")
            return False
    if not discovered_url:
        print("[ERROR] Cannot resolve device URL â€” no discovered_url available")
        return False
    device_base_url = discovered_url
    device_client = ASCOMDeviceClient(device_base_url)
    try:
        response = device_client.get_connection_status(
            client_id=0,
            client_transaction_id=random.randint(1, 99999)
        )
    except Exception as ex:
        print(f"Error retrieving connection status: {ex}")
        return False
    if response.get("Value") is not None:
        return response["Value"]
    return False

@before(PreProcessRequest(maxdev))
class connecting:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            val = is_connecting()
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'Covercalibrator.Connecting failed', ex)).json

def is_connecting():
    return False

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CovercalibratorMetadata.Description, req).json
        

def is_calibrator_changing():
    return False

# ------------- ADD calibratorchanging endpoint -------------
@before(PreProcessRequest(maxdev))
class calibratorchanging:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            val = is_calibrator_changing()
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'Covercalibrator.CalibratorChanging failed', ex)).json

@before(PreProcessRequest(maxdev))
class devicestate:
    def on_get(self, req: Request, resp: Response, devnum: int):
        params = {k.lower(): v for k, v in req.params.items()}
        client_transaction_id = params.get("clienttransactionid", "0").strip()
        if client_transaction_id == "":
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID cannot be empty.")
        try:
            client_transaction_id = int(client_transaction_id)
        except ValueError:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID must be an integer.")
        if client_transaction_id < 0:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID cannot be negative.")
        if not get_device_connected():
            resp.text = PropertyResponse(None, req, NotConnectedException()).json
            return
        try:
            val = [
                StateValue("CalibratorState", int(get_calibrator_state())),
                StateValue("CoverState", int(get_cover_state())),
                StateValue("CalibratorChanging", is_calibrator_changing()),
                StateValue("CoverMoving", is_cover_moving()),
                StateValue("Brightness", int(get_device_brightness())),
            ]
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'covercalibrator.DeviceState failed', ex)).json

@before(PreProcessRequest(maxdev))
class Disconnect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            params = {k.lower(): v for k, v in req.params.items()}
            client_transaction_id_raw = params.get("clienttransactionid", "").strip()
            if not client_transaction_id_raw:
                print("[WARNING] Missing ClientTransactionID in request. Using last known valid ID.")
                client_transaction_id = 67890
            elif not client_transaction_id_raw.isdigit():
                raise HTTPBadRequest(description=f"Invalid ClientTransactionID received: '{client_transaction_id_raw}'")
            else:
                client_transaction_id = int(client_transaction_id_raw)
            connected_param = params.get("connected", "").strip()
            if connected_param == "":
                print("[WARNING] Missing 'Connected' parameter. Defaulting to False.")
                connected = False
            elif connected_param.lower() == "true":
                connected = True
            elif connected_param.lower() == "false":
                connected = False
            else:
                raise HTTPBadRequest(description=f"Invalid 'Connected' parameter value: {connected_param}")
            response_body = {
                "ServerTransactionID": 999,
                "ClientTransactionID": client_transaction_id,
                "ErrorNumber": 0,
                "ErrorMessage": "Disconnect successful"
            }
            resp.status = HTTP_200
            resp.text = json.dumps(response_body)
        except HTTPBadRequest as e:
            print(f"[ERROR] Bad Request: {str(e)}")
            resp.status = HTTP_400
            resp.text = json.dumps({
                "title": "400 Bad Request",
                "description": str(e)
            })
        except Exception as ex:
            print(f"[ERROR] Internal Server Error: {str(ex)}")
            resp.status = HTTP_500
            resp.text = json.dumps({
                "title": "500 Internal Server Error",
                "description": f"Disconnect failed: {str(ex)}"
            })

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            ctid_str = get_request_field('ClientTransactionID', req, default="0").strip()
            resp.text = PropertyResponse("FlatAF Wi-Fi CoverCalibrator (ASCOM Alpaca)", req).json
        except BadRequestException as e:
            resp.text = MethodResponse(req, DriverException(0x400, 'Covercalibrator.DriverInfo invalid param', e)).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Covercalibrator.DriverInfo failed', ex)).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        params = {k.lower(): v for k, v in req.params.items()}
        client_transaction_id = params.get("clienttransactionid", "0").strip()
        try:
            client_transaction_id = int(client_transaction_id)
        except ValueError:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID must be an integer.")
        if client_transaction_id < 0:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID cannot be negative.")
        resp.text = PropertyResponse(CovercalibratorMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CovercalibratorMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CovercalibratorMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        params = {k.lower(): v for k, v in req.params.items()}
        client_transaction_id = params.get("clienttransactionid", "0").strip()
        if client_transaction_id == "":
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID cannot be empty.")
        try:
            client_transaction_id = int(client_transaction_id)
        except ValueError:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID must be an integer.")
        if client_transaction_id < 0:
            raise HTTPBadRequest("400 Bad Request", "ClientTransactionID cannot be negative.")
        resp.text = PropertyResponse([], req).json
        
@before(PreProcessRequest(maxdev))
class calibratorstate:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            val = get_calibrator_state()
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, "Covercalibrator.CalibratorState failed", ex)).json

def get_calibrator_state():
    """
    Returns the current CalibratorState:
    - NotPresent if device is not connected
    - Off if brightness is 0 or device disconnected
    - Ready if brightness > 0
    """
    if not get_device_connected():
        return CalibratorStatus.Off  # Treat disconnected as "Off"

    if device_brightness == 0:
        return CalibratorStatus.Off

    return CalibratorStatus.Ready
    
@before(PreProcessRequest(maxdev))
class brightness:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            val = get_device_brightness()
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, "Covercalibrator.Brightness failed", ex)).json
            
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            brightness_raw = get_request_field('Brightness', req)
            
            if brightness_raw is None:
                raise HTTPBadRequest(title="Bad Request", description="Missing 'Brightness' parameter.")

            if isinstance(brightness_raw, float):
                raise InvalidValueException("Brightness must be an integer, not a float.", 1280)

            brightness_str = str(brightness_raw)

            if not brightness_str.isdigit():
                raise InvalidValueException("Brightness must be a non-negative integer.", 1280)

            brightness = int(brightness_str)

            if brightness < 0 or brightness > 32767:
                raise InvalidValueException("Brightness must be between 0 and 32767.", 1280)

            set_device_brightness(brightness)
            resp.text = PropertyResponse(brightness, req).json
            
        except HTTPBadRequest as e:
            resp.status = falcon.HTTP_400
            resp.text = MethodResponse(req, InvalidValueException(str(e), 1280)).json

        except InvalidValueException as e:
            resp.text = MethodResponse(req, e).json

        except Exception as e:
            resp.text = MethodResponse(req, ServerException(str(e))).json


@before(PreProcessRequest(maxdev))
class maxbrightness:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not get_device_connected():
            resp.text = PropertyResponse(None, req, NotConnectedException()).json
            return
        try:
            val = get_max_brightness()
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'Covercalibrator.Maxbrightness failed', ex)).json
            
@before(PreProcessRequest(maxdev))
class calibratoroff:
    def on_put(self, req: Request, resp: Response, devnum: int):
        if not get_device_connected():
            resp.text = PropertyResponse(None, req, NotConnectedException()).json
            return
        try:
            set_device_off()
            resp.text = MethodResponse(req).json
            
        except HTTPBadRequest as e:
            resp.status = falcon.HTTP_400
            resp.text = MethodResponse(req, InvalidValueException(str(e), 1280)).json
            
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Covercalibrator.Calibratoroff failed', ex)).json

@before(PreProcessRequest(maxdev))
class calibratoron:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            brightness_raw = get_request_field('Brightness', req)

            if brightness_raw is None:
                raise HTTPBadRequest(title="Bad Request", description="Missing 'Brightness' parameter.")

            # Reject float explicitly
            if isinstance(brightness_raw, float):
                raise HTTPBadRequest(title="Bad Request", description="Brightness must be an integer, not a float.")

            # Convert to string for safety
            brightness_str = str(brightness_raw)

            if not brightness_str.isdigit():
                raise HTTPBadRequest(title="Bad Request", description="Brightness must be a non-negative integer.")

            brightness = int(brightness_str)

            if brightness < 0 or brightness > 32767:
                raise HTTPBadRequest(title="Bad Request", description="Brightness must be between 0 and 32767.")

            set_device_brightness(brightness)
            resp.text = PropertyResponse(brightness, req).json

        except HTTPBadRequest as e:
            resp.status = falcon.HTTP_400
            resp.text = MethodResponse(req, InvalidValueException(str(e), 1280)).json

        except Exception as e:
            resp.text = MethodResponse(req, ServerException(str(e))).json


def get_max_brightness():
    return load_config().get("MAX_BRIGHTNESS", 32767)

def get_device_brightness():
    try:
        config = load_config()
        base_url = config["BaseURL"]
        url = f"{base_url}/brightness"
        response = requests.get(url, timeout=5)
        if response.status_code != 200:
            raise DriverException(0x500, f"Failed to get brightness. HTTP {response.status_code}")
        data = response.json()
        # Extract the brightness from the device response
        brightness = data.get("brightness")
        if brightness is None:
            raise DriverException(0x500, "Brightness field missing from device response")
        return brightness
    except Exception as e:
        print(f"[ERROR] get_device_brightness failed: {e}")
        raise DriverException(0x500, f"Exception in get_device_brightness: {e}") from e


def set_device_brightness(value):
    try:
        config = load_config()
        base_url = config["BaseURL"]
        payload = {"Brightness": value}
        response = requests.put(f"{base_url}/setbrightness", json=payload, timeout=5)
        if response.status_code != 200:
            raise DriverException(0x500, f"Failed to set brightness. HTTP {response.status_code}")
        
        global device_brightness
        device_brightness = value
        return True
    except Exception as e:
        print(f"[ERROR] set_device_brightness failed: {e}")
        raise DriverException(0x500, f"Exception in set_device_brightness: {e}") from e
    
def set_device_on():
    try:
        config = load_config()
        base_url = config["BaseURL"]
        device = ASCOMDeviceClient(base_url)
        response = requests.put(f"{base_url}/calibratoron", timeout=5)
        if response.status_code != 200:
            raise DriverException(0x500, f"Failed to turn calibrator on. HTTP {response.status_code}")
 
        return True
    except Exception as e:
        raise DriverException(0x500, f"Exception in set_device_on: {e}")
    
def set_device_off():
    try:
        config = load_config()
        base_url = config["BaseURL"]
        device = ASCOMDeviceClient(base_url)
        response = requests.put(f"{base_url}/calibratoroff", timeout=5)
        if response.status_code != 200:
            raise DriverException(0x500, f"Failed to turn calibrator off. HTTP {response.status_code}")

        return True
    except Exception as e:
        raise DriverException(0x500, f"Exception in set_device_off: {e}")

# def set_calibrator_brightness(brightness):
#     print(f"Setting calibrator brightness to {brightness}")

@before(PreProcessRequest(maxdev))
class closecover:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException("FlatAF has no cover to close")).json

@before(PreProcessRequest(maxdev))
class HaltCover:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException("FlatAF has no haltable cover")).json

@before(PreProcessRequest(maxdev))
class opencover:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException("FlatAF has no cover to open")).json

@before(PreProcessRequest(maxdev))
class covermoving:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not get_device_connected():
            resp.text = PropertyResponse(None, req, NotConnectedException()).json
            return
        try:
            val = bool(is_cover_moving())
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'Covercalibrator.Covermoving failed', ex)).json

def is_cover_moving():
    return False

@before(PreProcessRequest(maxdev))
class coverstate:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not get_device_connected():
            resp.text = PropertyResponse(None, req, NotConnectedException()).json
            return
        try:
            val = CoverStatus.NotPresent
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req, DriverException(0x500, 'Covercalibrator.CoverState failed', ex)).json

def get_cover_state():
    return CoverStatus.NotPresent

@before(PreProcessRequest(maxdev))
class opencover:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException("FlatAF has no cover to open")).json
